//#########################################################################
//#########################################################################
//#          THIS IS AN AUTOGENERATED FILE, DO NOT EDIT MANUALLY          #
//#########################################################################
//#########################################################################



#include "Platform.h"
#define offsetof(s,m)   (UINT64)&(((s *)0)->m)

#pragma pack(1)
typedef struct _SIDMAPPING {
    UINT16 SIDBase;
    UINT16 Count;
    UINT16 SIDFlags;
    UINT8 Vmid;
    UINT8 SIDType;
    UINT16 CBIndex;
}SIDMAPPING;



typedef struct _SMMUNODE_APPSTCU{
    UINT32 SizeofSMMUNode;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SmmuFlags;
    UINT64 BaseAddress;
    UINT64 PowerPhyAddress;
    UINT32 PowerCtrlBmsk;
    UINT32 PowerCtrlPollBmsk;
    UINT64 ClkPhyAddress;
    UINT32 ClkCtrlBmsk;
    UINT32 ClkCtrlPollBmsk;
    UINT64 HaltPhyAddress;
    UINT32 HaltWriteBmsk;
    UINT32 HaltPollBmsk;
    UINT32 NumImplDefinedRegisters;
    UINT32 ImplDefinedRegistersEntrySize;
    UINT32 ImplDefinedRegistersOffset;
    UINT32 NumSIDMappingsMax;
    UINT32 SIDMappingsEntrySize;
    UINT32 NumSIDMappingsValid;
    UINT32 SIDMappingsOffset;
    SIDMAPPING SIDMappings[510];
}SMMUNODE_APPSTCU;

#define SMMUNODE_APPSTCU_VAR  {		\
.SizeofSMMUNode	=	sizeof(SMMUNODE_APPSTCU),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SmmuFlags	=	0x1,		\
.BaseAddress	=	0x15000000,		\
.PowerPhyAddress	=	0x0,		\
.PowerCtrlBmsk	=	0x0,		\
.PowerCtrlPollBmsk	=	0x0,		\
.ClkPhyAddress	=	0x0017c02c,		\
.ClkCtrlBmsk	=	0x1,		\
.ClkCtrlPollBmsk	=	0x80000000,		\
.HaltPhyAddress	=	0x0,		\
.HaltWriteBmsk	=	0x0,		\
.HaltPollBmsk	=	0x0,		\
.NumImplDefinedRegisters	=	0,		\
.ImplDefinedRegistersEntrySize	=	16,		\
.ImplDefinedRegistersOffset	=	0x0,		\
.NumSIDMappingsMax	=	510,		\
.SIDMappingsEntrySize	=	10,		\
.NumSIDMappingsValid	=	224,		\
.SIDMappingsOffset	=	offsetof(SMMUNODE_APPSTCU,SIDMappings),		\
.SIDMappings	={		\
    {		\
        .SIDBase	=	0x400,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	3,		\
        .Vmid	=	0,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x401,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	3,		\
        .Vmid	=	0,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x402,		\
        .SIDFlags	=	0,		\
        .Count	=	2,		\
        .SIDType	=	3,		\
        .Vmid	=	0,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x800,		\
        .SIDFlags	=	0x1C,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x801,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	13,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x820,		\
        .SIDFlags	=	0x1C,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	0x3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x821,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	0xD,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x840,		\
        .SIDFlags	=	0x1C,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x841,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	13,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x860,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x861,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	13,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x880,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x881,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	13,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x8A0,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x8A1,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	13,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x8C0,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x8C1,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	13,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x8E0,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x8E1,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	13,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0xC00,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0xC01,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	13,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0xC20,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0xC21,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	13,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0xC40,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0xC41,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	13,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0xC60,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0xC61,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	13,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0xC80,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0xC81,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	13,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0xCA0,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0xCA1,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	13,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0xCC0,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0xCC1,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	13,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0xCE0,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0xCE1,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	13,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x2000,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x2001,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	13,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x2020,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x2021,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	13,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x2040,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x2041,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	13,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x2062,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x2080,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x2081,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	13,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x20A0,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x20A1,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	13,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x20C0,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x20E0,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x2100,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x2101,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	13,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x2120,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x2121,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	13,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x2140,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x2141,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	13,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x440,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	3,		\
        .Vmid	=	0,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x420,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	3,		\
        .Vmid	=	0,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x4E4,		\
        .SIDFlags	=	0,		\
        .Count	=	2,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x4E6,		\
        .SIDFlags	=	0,		\
        .Count	=	2,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x4EA,		\
        .SIDFlags	=	0,		\
        .Count	=	2,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x4F2,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x4F3,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	9,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x4F4,		\
        .SIDFlags	=	0,		\
        .Count	=	2,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x4F6,		\
        .SIDFlags	=	0,		\
        .Count	=	2,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x4F8,		\
        .SIDFlags	=	0,		\
        .Count	=	2,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x4FA,		\
        .SIDFlags	=	0,		\
        .Count	=	2,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x4FC,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	9,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x4FD,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	9,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x4FE,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	9,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x4FF,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x900,		\
        .SIDFlags	=	30,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x901,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	10,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x902,		\
        .SIDFlags	=	30,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x903,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	17,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0xD00,		\
        .SIDFlags	=	30,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0xD01,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	10,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0xD02,		\
        .SIDFlags	=	30,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0xD03,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	17,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x0,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x480,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x481,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x482,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x483,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x484,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x488,		\
        .SIDFlags	=	0,		\
        .Count	=	8,		\
        .SIDType	=	3,		\
        .Vmid	=	0,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1820,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1821,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1822,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1825,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1826,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1827,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1828,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1829,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x182a,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x182b,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x182c,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1832,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1833,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1834,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1800,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	6,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1801,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1802,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	48,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1803,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1804,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1805,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1806,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1807,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x180F,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1860,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1861,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1862,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1863,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1864,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1868,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1869,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1840,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1848,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1849,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x184A,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x184B,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x184C,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x184D,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1181,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1182,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1183,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1184,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1185,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1186,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1187,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1188,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1189,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	10,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x118B,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x118C,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x118D,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x118E,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x118F,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x11A0,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	30,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x11A1,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x11A2,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x11A3,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x11A4,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x11A5,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x11A6,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x11A7,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x11A8,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x11A9,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	10,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x11AA,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	42,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x11AB,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x11AC,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x11AD,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x11AE,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x11AF,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1581,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1582,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1583,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1584,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1585,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1586,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1587,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1588,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1589,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	10,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x158B,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x158C,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x158D,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x158E,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x158F,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x15A0,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	30,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x15A1,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x15A2,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x15A3,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x15A4,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x15A5,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x15A6,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x15A7,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x15A8,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x15A9,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	10,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x15AA,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	42,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x15AB,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x15AC,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x15AD,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x15AE,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x15AF,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x4A0,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x4C0,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x123,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x124,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	3,		\
        .Vmid	=	0,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x125,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x136,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x43,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x44,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	3,		\
        .Vmid	=	0,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x45,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	22,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x56,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0xC0,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x100,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x60,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x460,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	3,		\
        .Vmid	=	0,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x80,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0xA0,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0xE0,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x2180,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x2181,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	9,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x2183,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	10,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x2184,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	11,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x2185,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	9,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x21A0,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x21A2,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	12,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x21A4,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	11,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x2187,		\
        .SIDFlags	=	28,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1C00,		\
        .SIDFlags	=	0,		\
        .Count	=	2,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1C02,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	25,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1C03,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	24,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1C04,		\
        .SIDFlags	=	0,		\
        .Count	=	4,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1C08,		\
        .SIDFlags	=	0,		\
        .Count	=	8,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1C10,		\
        .SIDFlags	=	0,		\
        .Count	=	16,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1C20,		\
        .SIDFlags	=	0,		\
        .Count	=	32,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1C40,		\
        .SIDFlags	=	0,		\
        .Count	=	64,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1C80,		\
        .SIDFlags	=	0,		\
        .Count	=	2,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1C82,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	25,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1C83,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	24,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1C84,		\
        .SIDFlags	=	0,		\
        .Count	=	4,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1C88,		\
        .SIDFlags	=	0,		\
        .Count	=	8,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1C90,		\
        .SIDFlags	=	0,		\
        .Count	=	16,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1CA0,		\
        .SIDFlags	=	0,		\
        .Count	=	32,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x1CC0,		\
        .SIDFlags	=	0,		\
        .Count	=	64,		\
        .SIDType	=	1,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
},		\
}




typedef struct _SMMUNODE_GFX{
    UINT32 SizeofSMMUNode;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SmmuFlags;
    UINT64 BaseAddress;
    UINT64 PowerPhyAddress;
    UINT32 PowerCtrlBmsk;
    UINT32 PowerCtrlPollBmsk;
    UINT64 ClkPhyAddress;
    UINT32 ClkCtrlBmsk;
    UINT32 ClkCtrlPollBmsk;
    UINT64 HaltPhyAddress;
    UINT32 HaltWriteBmsk;
    UINT32 HaltPollBmsk;
    UINT32 NumImplDefinedRegisters;
    UINT32 ImplDefinedRegistersEntrySize;
    UINT32 ImplDefinedRegistersOffset;
    UINT32 NumSIDMappingsMax;
    UINT32 SIDMappingsEntrySize;
    UINT32 NumSIDMappingsValid;
    UINT32 SIDMappingsOffset;
    SIDMAPPING SIDMappings[30];
}SMMUNODE_GFX;

#define SMMUNODE_GFX_VAR  {		\
.SizeofSMMUNode	=	sizeof(SMMUNODE_GFX),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SmmuFlags	=	0x1,		\
.BaseAddress	=	0x3da0000,		\
.PowerPhyAddress	=	0x03d92004,		\
.PowerCtrlBmsk	=	0x1,		\
.PowerCtrlPollBmsk	=	0x80000000,		\
.ClkPhyAddress	=	0x03d92000,		\
.ClkCtrlBmsk	=	0x1,		\
.ClkCtrlPollBmsk	=	0x80000000,		\
.HaltPhyAddress	=	0x0,		\
.HaltWriteBmsk	=	0x0,		\
.HaltPollBmsk	=	0x0,		\
.NumImplDefinedRegisters	=	0,		\
.ImplDefinedRegistersEntrySize	=	16,		\
.ImplDefinedRegistersOffset	=	0,		\
.NumSIDMappingsMax	=	30,		\
.SIDMappingsEntrySize	=	10,		\
.NumSIDMappingsValid	=	14,		\
.SIDMappingsOffset	=	offsetof(SMMUNODE_GFX,SIDMappings),		\
.SIDMappings	={		\
    {		\
        .SIDBase	=	0,		\
        .SIDFlags	=	61,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	1,		\
        .SIDFlags	=	61,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	2,		\
    },		\
    {		\
        .SIDBase	=	2,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	10,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	3,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	38,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	4,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	5,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	7,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x400,		\
        .SIDFlags	=	61,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x401,		\
        .SIDFlags	=	61,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	2,		\
    },		\
    {		\
        .SIDBase	=	0x402,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	10,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x403,		\
        .SIDFlags	=	0,		\
        .Count	=	1,		\
        .SIDType	=	1,		\
        .Vmid	=	38,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x404,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x405,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
    {		\
        .SIDBase	=	0x407,		\
        .SIDFlags	=	60,		\
        .Count	=	1,		\
        .SIDType	=	2,		\
        .Vmid	=	3,		\
        .CBIndex	=	0,		\
    },		\
},		\
}

typedef struct _VMCONFIGNODE{
    UINT32 SizeofVMConfigNode;
    UINT16 Revision;
    UINT16 Reserved1;
    UINT8 Vmid;
    UINT8 Type;
    UINT8 Reserved2;
    UINT8 InputAddressWidth;
    UINT8 OutputAddressWidth;
    UINT8 VMType;
}VMCONFIGNODE;

#define VMCONFIGNODE_RPM  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	2,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	2,		\
}

#define VMCONFIGNODE_HLOS  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	3,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_HYP  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	4,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_SSC_Q6_ELF  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	5,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	32,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_ADSP_Q6_ELF  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	6,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	32,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_SSC_HLOS  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	7,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	32,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_CP_TOUCH  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	8,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_CP_BITSTREAM  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	9,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_CP_PIXEL  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0xA,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_CP_NON_PIXEL  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0xB,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_VIDEO_FW  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0xC,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	32,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_CP_CAMERA  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0xD,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_HLOS_UNMAPPED  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0xE,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	0,		\
}

#define VMCONFIGNODE_MSS_MSA  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0xF,		\
.Type	=	2,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	32,		\
.OutputAddressWidth	=	32,		\
.VMType	=	2,		\
}

#define VMCONFIGNODE_MSS_NONMSA  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x10,		\
.Type	=	2,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	32,		\
.OutputAddressWidth	=	32,		\
.VMType	=	2,		\
}

#define VMCONFIGNODE_CP_SECDISP  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x11,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	32,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_CP_APP  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x12,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	0,		\
}

#define VMCONFIGNODE_UNMAPPED  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x13,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	0,		\
}

#define VMCONFIGNODE_TZ  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	1,		\
.Type	=	1,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	0,		\
}

#define VMCONFIGNODE_TZ_UNMAPPED  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x14,		\
.Type	=	1,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	0,		\
}

#define VMCONFIGNODE_TZ_STATIC  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x15,		\
.Type	=	1,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	0,		\
}

#define VMCONFIGNODE_LPASS  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x16,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	32,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_WLAN  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x18,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_WLAN_COPYENG  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x19,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_SPSS_SP  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x1A,		\
.Type	=	1,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_SPSS_NONSP  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x1B,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_CP_CAMERA_PREVIEW  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x1D,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_CDSP_Q6_ELF  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x1E,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_HLOS_GSI  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x20,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_ADSP_SHARED  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x21,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_SPSS_SP_SHARED  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x22,		\
.Type	=	1,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_KERNEL_PROTECTION  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x23,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_SPSS_HLOS_SHARED  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x24,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_ADSP_HEAP  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x25,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_SHARED_GPU_PIL  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x26,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	0,		\
}

#define VMCONFIGNODE_NPU_FW  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x28,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_CP_NPU  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x29,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_CP_CDSP  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x2A,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

#define VMCONFIGNODE_MSS_NAV  {		\
.SizeofVMConfigNode	=	sizeof(VMCONFIGNODE),		\
.Revision	=	0x2,		\
.Reserved1	=	0x0,		\
.Vmid	=	0x2B,		\
.Type	=	0,		\
.Reserved2	=	0x0,		\
.InputAddressWidth	=	36,		\
.OutputAddressWidth	=	36,		\
.VMType	=	1,		\
}

typedef struct _SRCVM {
    UINT8 Vmid;
}SRCVM;



typedef struct _DSTVM {
    UINT8 Vmid;
    UINT8 Permissions;
}DSTVM;



typedef struct _VMASSIGNRULE_HLOS_TO_CP_SECDISP{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_TO_CP_SECDISP;

#define VMASSIGNRULE_HLOS_TO_CP_SECDISP_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_CP_SECDISP),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_SECDISP,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_SECDISP,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0x11,		\
        .Permissions	=	4,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_CP_CAMERA{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_TO_CP_CAMERA;

#define VMASSIGNRULE_HLOS_TO_CP_CAMERA_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_CP_CAMERA),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_CAMERA,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_CAMERA,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0xD,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_CP_TOUCH{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_TO_CP_TOUCH;

#define VMASSIGNRULE_HLOS_TO_CP_TOUCH_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_CP_TOUCH),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_TOUCH,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_TOUCH,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	8,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_CP_BITSTREAM{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_TO_CP_BITSTREAM;

#define VMASSIGNRULE_HLOS_TO_CP_BITSTREAM_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_CP_BITSTREAM),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_BITSTREAM,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_BITSTREAM,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	9,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_CP_PIXEL{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_TO_CP_PIXEL;

#define VMASSIGNRULE_HLOS_TO_CP_PIXEL_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_CP_PIXEL),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_PIXEL,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_PIXEL,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0xA,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_CP_CAMERA_PREVIEW{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_TO_CP_CAMERA_PREVIEW;

#define VMASSIGNRULE_HLOS_TO_CP_CAMERA_PREVIEW_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_CP_CAMERA_PREVIEW),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_CAMERA_PREVIEW,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_CAMERA_PREVIEW,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0x1D,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_CP_APP{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_TO_CP_APP;

#define VMASSIGNRULE_HLOS_TO_CP_APP_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_CP_APP),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_APP,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_APP,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0x12,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_CP_SECDISP_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[2];
}VMASSIGNRULE_HLOS_TO_CP_SECDISP_HLOS;

#define VMASSIGNRULE_HLOS_TO_CP_SECDISP_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_CP_SECDISP_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_SECDISP_HLOS,SrcVMs),		\
.DstVMsCount	=	2,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_SECDISP_HLOS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0x11,		\
        .Permissions	=	4,		\
    },		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	6,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_CP_CAMERA_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[2];
}VMASSIGNRULE_HLOS_TO_CP_CAMERA_HLOS;

#define VMASSIGNRULE_HLOS_TO_CP_CAMERA_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_CP_CAMERA_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_CAMERA_HLOS,SrcVMs),		\
.DstVMsCount	=	2,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_CAMERA_HLOS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0xD,		\
        .Permissions	=	4,		\
    },		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	6,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_CP_TOUCH_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[2];
}VMASSIGNRULE_HLOS_TO_CP_TOUCH_HLOS;

#define VMASSIGNRULE_HLOS_TO_CP_TOUCH_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_CP_TOUCH_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_TOUCH_HLOS,SrcVMs),		\
.DstVMsCount	=	2,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_TOUCH_HLOS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	8,		\
        .Permissions	=	4,		\
    },		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	6,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_CP_BITSTREAM_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[2];
}VMASSIGNRULE_HLOS_TO_CP_BITSTREAM_HLOS;

#define VMASSIGNRULE_HLOS_TO_CP_BITSTREAM_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_CP_BITSTREAM_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_BITSTREAM_HLOS,SrcVMs),		\
.DstVMsCount	=	2,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_BITSTREAM_HLOS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	9,		\
        .Permissions	=	4,		\
    },		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	6,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_CP_PIXEL_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[2];
}VMASSIGNRULE_HLOS_TO_CP_PIXEL_HLOS;

#define VMASSIGNRULE_HLOS_TO_CP_PIXEL_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_CP_PIXEL_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_PIXEL_HLOS,SrcVMs),		\
.DstVMsCount	=	2,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_PIXEL_HLOS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0xA,		\
        .Permissions	=	4,		\
    },		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	6,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_CP_CAMPREV_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[2];
}VMASSIGNRULE_HLOS_TO_CP_CAMPREV_HLOS;

#define VMASSIGNRULE_HLOS_TO_CP_CAMPREV_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_CP_CAMPREV_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_CAMPREV_HLOS,SrcVMs),		\
.DstVMsCount	=	2,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_CAMPREV_HLOS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0x1D,		\
        .Permissions	=	4,		\
    },		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	6,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_CP_APP_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[2];
}VMASSIGNRULE_HLOS_TO_CP_APP_HLOS;

#define VMASSIGNRULE_HLOS_TO_CP_APP_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_CP_APP_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_APP_HLOS,SrcVMs),		\
.DstVMsCount	=	2,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CP_APP_HLOS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0x12,		\
        .Permissions	=	4,		\
    },		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	6,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_CP_SECDISP_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_CP_SECDISP_TO_HLOS;

#define VMASSIGNRULE_CP_SECDISP_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_CP_SECDISP_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_CP_SECDISP_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_CP_SECDISP_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	0x11,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_CP_CAMERA_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_CP_CAMERA_TO_HLOS;

#define VMASSIGNRULE_CP_CAMERA_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_CP_CAMERA_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_CP_CAMERA_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_CP_CAMERA_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	0xD,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_CP_TOUCH_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_CP_TOUCH_TO_HLOS;

#define VMASSIGNRULE_CP_TOUCH_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_CP_TOUCH_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_CP_TOUCH_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_CP_TOUCH_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	8,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_CP_BITSTREAM_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_CP_BITSTREAM_TO_HLOS;

#define VMASSIGNRULE_CP_BITSTREAM_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_CP_BITSTREAM_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_CP_BITSTREAM_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_CP_BITSTREAM_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	9,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_CP_PIXEL_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_CP_PIXEL_TO_HLOS;

#define VMASSIGNRULE_CP_PIXEL_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_CP_PIXEL_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_CP_PIXEL_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_CP_PIXEL_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	0xA,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_CP_CAMPREV_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_CP_CAMPREV_TO_HLOS;

#define VMASSIGNRULE_CP_CAMPREV_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_CP_CAMPREV_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_CP_CAMPREV_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_CP_CAMPREV_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	0x1D,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_CP_APP_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_CP_APP_TO_HLOS;

#define VMASSIGNRULE_CP_APP_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_CP_APP_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_CP_APP_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_CP_APP_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	0x12,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_SECDISP_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[2];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_SECDISP_TO_HLOS;

#define VMASSIGNRULE_HLOS_SECDISP_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_SECDISP_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	2,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_SECDISP_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_SECDISP_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
    {		\
        .Vmid	=	0x11,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_CAMERA_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[2];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_CAMERA_TO_HLOS;

#define VMASSIGNRULE_HLOS_CAMERA_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_CAMERA_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	2,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_CAMERA_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_CAMERA_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
    {		\
        .Vmid	=	0xD,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TOUCH_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[2];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_TOUCH_TO_HLOS;

#define VMASSIGNRULE_HLOS_TOUCH_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TOUCH_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	2,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TOUCH_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TOUCH_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
    {		\
        .Vmid	=	8,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_BITSTREAM_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[2];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_BITSTREAM_TO_HLOS;

#define VMASSIGNRULE_HLOS_BITSTREAM_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_BITSTREAM_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	2,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_BITSTREAM_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_BITSTREAM_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
    {		\
        .Vmid	=	9,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_PIXEL_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[2];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_PIXEL_TO_HLOS;

#define VMASSIGNRULE_HLOS_PIXEL_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_PIXEL_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	2,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_PIXEL_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_PIXEL_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
    {		\
        .Vmid	=	0xA,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_CAMPREV_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[2];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_CAMPREV_TO_HLOS;

#define VMASSIGNRULE_HLOS_CAMPREV_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_CAMPREV_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	2,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_CAMPREV_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_CAMPREV_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
    {		\
        .Vmid	=	0x1D,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_APP_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[2];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_APP_TO_HLOS;

#define VMASSIGNRULE_HLOS_APP_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_APP_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	2,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_APP_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_APP_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
    {		\
        .Vmid	=	0x12,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_MSA{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_TO_MSA;

#define VMASSIGNRULE_HLOS_TO_MSA_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_MSA),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_MSA,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_MSA,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	1,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0xF,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_MSA_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[2];
}VMASSIGNRULE_HLOS_TO_MSA_HLOS;

#define VMASSIGNRULE_HLOS_TO_MSA_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_MSA_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_MSA_HLOS,SrcVMs),		\
.DstVMsCount	=	2,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_MSA_HLOS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	1,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0xF,		\
        .Permissions	=	7,		\
    },		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_MSA_TO_MSA{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[2];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_MSA_TO_MSA;

#define VMASSIGNRULE_HLOS_MSA_TO_MSA_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_MSA_TO_MSA),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	2,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_MSA_TO_MSA,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_MSA_TO_MSA,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	1,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
    {		\
        .Vmid	=	0xF,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0xF,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_MSA_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_MSA_TO_HLOS;

#define VMASSIGNRULE_MSA_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_MSA_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_MSA_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_MSA_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	1,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	1,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	0xF,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_MSA_WLAN{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[2];
}VMASSIGNRULE_HLOS_TO_MSA_WLAN;

#define VMASSIGNRULE_HLOS_TO_MSA_WLAN_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_MSA_WLAN),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_MSA_WLAN,SrcVMs),		\
.DstVMsCount	=	2,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_MSA_WLAN,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	1,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0xF,		\
        .Permissions	=	7,		\
    },		\
    {		\
        .Vmid	=	0x18,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_MSA_WLAN_COPYENG{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[3];
}VMASSIGNRULE_HLOS_TO_MSA_WLAN_COPYENG;

#define VMASSIGNRULE_HLOS_TO_MSA_WLAN_COPYENG_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_MSA_WLAN_COPYENG),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_MSA_WLAN_COPYENG,SrcVMs),		\
.DstVMsCount	=	3,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_MSA_WLAN_COPYENG,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	1,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0xF,		\
        .Permissions	=	7,		\
    },		\
    {		\
        .Vmid	=	0x18,		\
        .Permissions	=	7,		\
    },		\
    {		\
        .Vmid	=	0x19,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_WLAN_MSA_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[2];
    DSTVM DstVMs[1];
}VMASSIGNRULE_WLAN_MSA_TO_HLOS;

#define VMASSIGNRULE_WLAN_MSA_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_WLAN_MSA_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	2,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_WLAN_MSA_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_WLAN_MSA_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	1,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	1,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	0x18,		\
    },		\
    {		\
        .Vmid	=	0xF,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_WLAN_MSA_COPYENG_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[3];
    DSTVM DstVMs[1];
}VMASSIGNRULE_WLAN_MSA_COPYENG_TO_HLOS;

#define VMASSIGNRULE_WLAN_MSA_COPYENG_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_WLAN_MSA_COPYENG_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	3,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_WLAN_MSA_COPYENG_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_WLAN_MSA_COPYENG_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	1,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	1,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	0x18,		\
    },		\
    {		\
        .Vmid	=	0xF,		\
    },		\
    {		\
        .Vmid	=	0x19,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_SSC_Q6_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[2];
}VMASSIGNRULE_HLOS_TO_SSC_Q6_HLOS;

#define VMASSIGNRULE_HLOS_TO_SSC_Q6_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_SSC_Q6_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_SSC_Q6_HLOS,SrcVMs),		\
.DstVMsCount	=	2,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_SSC_Q6_HLOS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
    {		\
        .Vmid	=	5,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_SSC_Q6_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[2];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_SSC_Q6_TO_HLOS;

#define VMASSIGNRULE_HLOS_SSC_Q6_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_SSC_Q6_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	2,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_SSC_Q6_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_SSC_Q6_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
    {		\
        .Vmid	=	5,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_TZ_SPSS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[2];
}VMASSIGNRULE_HLOS_TO_TZ_SPSS;

#define VMASSIGNRULE_HLOS_TO_TZ_SPSS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_TZ_SPSS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_TZ_SPSS,SrcVMs),		\
.DstVMsCount	=	2,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_TZ_SPSS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	1,		\
        .Permissions	=	7,		\
    },		\
    {		\
        .Vmid	=	0x1A,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_HYP{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_TO_HYP;

#define VMASSIGNRULE_HLOS_TO_HYP_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_HYP),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_HYP,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_HYP,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	4,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_HLOS_ADSP_SSC_MSA{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[4];
}VMASSIGNRULE_HLOS_TO_HLOS_ADSP_SSC_MSA;

#define VMASSIGNRULE_HLOS_TO_HLOS_ADSP_SSC_MSA_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_HLOS_ADSP_SSC_MSA),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_HLOS_ADSP_SSC_MSA,SrcVMs),		\
.DstVMsCount	=	4,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_HLOS_ADSP_SSC_MSA,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	1,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
    {		\
        .Vmid	=	6,		\
        .Permissions	=	7,		\
    },		\
    {		\
        .Vmid	=	5,		\
        .Permissions	=	7,		\
    },		\
    {		\
        .Vmid	=	0xF,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_MSA_HLOS_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[2];
    DSTVM DstVMs[1];
}VMASSIGNRULE_MSA_HLOS_TO_HLOS;

#define VMASSIGNRULE_MSA_HLOS_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_MSA_HLOS_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	2,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_MSA_HLOS_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_MSA_HLOS_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	1,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
    {		\
        .Vmid	=	0xF,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_ADSP_SHARED{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_TO_ADSP_SHARED;

#define VMASSIGNRULE_HLOS_TO_ADSP_SHARED_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_ADSP_SHARED),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_ADSP_SHARED,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_ADSP_SHARED,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0x21,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_SPSS_SHARED{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_TO_SPSS_SHARED;

#define VMASSIGNRULE_HLOS_TO_SPSS_SHARED_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_SPSS_SHARED),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_SPSS_SHARED,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_SPSS_SHARED,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0x22,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_ADSP_SHARED_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_ADSP_SHARED_TO_HLOS;

#define VMASSIGNRULE_ADSP_SHARED_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_ADSP_SHARED_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_ADSP_SHARED_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_ADSP_SHARED_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	0x21,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_SPSS_SHARED_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_SPSS_SHARED_TO_HLOS;

#define VMASSIGNRULE_SPSS_SHARED_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_SPSS_SHARED_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_SPSS_SHARED_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_SPSS_SHARED_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	0x22,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_SPSS_HLOS_SHARED_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[2];
}VMASSIGNRULE_HLOS_TO_SPSS_HLOS_SHARED_HLOS;

#define VMASSIGNRULE_HLOS_TO_SPSS_HLOS_SHARED_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_SPSS_HLOS_SHARED_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_SPSS_HLOS_SHARED_HLOS,SrcVMs),		\
.DstVMsCount	=	2,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_SPSS_HLOS_SHARED_HLOS,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0x24,		\
        .Permissions	=	7,		\
    },		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_SPSS_HLOS_SHARED_HLOS_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[2];
    DSTVM DstVMs[1];
}VMASSIGNRULE_SPSS_HLOS_SHARED_HLOS_TO_HLOS;

#define VMASSIGNRULE_SPSS_HLOS_SHARED_HLOS_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_SPSS_HLOS_SHARED_HLOS_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	2,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_SPSS_HLOS_SHARED_HLOS_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_SPSS_HLOS_SHARED_HLOS_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
    {		\
        .Vmid	=	0x24,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_TO_HLOS;

#define VMASSIGNRULE_HLOS_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	4,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_CDSP{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_TO_CDSP;

#define VMASSIGNRULE_HLOS_TO_CDSP_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_CDSP),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CDSP,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CDSP,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0x2A,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_TO_CDSP_CAMERA{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[2];
}VMASSIGNRULE_HLOS_TO_CDSP_CAMERA;

#define VMASSIGNRULE_HLOS_TO_CDSP_CAMERA_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_TO_CDSP_CAMERA),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CDSP_CAMERA,SrcVMs),		\
.DstVMsCount	=	2,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_TO_CDSP_CAMERA,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0x2A,		\
        .Permissions	=	7,		\
    },		\
    {		\
        .Vmid	=	0xD,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_CDSP_CAMERA_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[2];
    DSTVM DstVMs[1];
}VMASSIGNRULE_CDSP_CAMERA_TO_HLOS;

#define VMASSIGNRULE_CDSP_CAMERA_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_CDSP_CAMERA_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	2,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_CDSP_CAMERA_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_CDSP_CAMERA_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	0x2A,		\
    },		\
    {		\
        .Vmid	=	0xD,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HYP_TO_SSC{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HYP_TO_SSC;

#define VMASSIGNRULE_HYP_TO_SSC_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HYP_TO_SSC),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HYP_TO_SSC,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HYP_TO_SSC,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	4,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	5,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HYP_TO_ADSP{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HYP_TO_ADSP;

#define VMASSIGNRULE_HYP_TO_ADSP_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HYP_TO_ADSP),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HYP_TO_ADSP,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HYP_TO_ADSP,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	4,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	6,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HYP_TO_ADSP_LPASS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[2];
}VMASSIGNRULE_HYP_TO_ADSP_LPASS;

#define VMASSIGNRULE_HYP_TO_ADSP_LPASS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HYP_TO_ADSP_LPASS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HYP_TO_ADSP_LPASS,SrcVMs),		\
.DstVMsCount	=	2,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HYP_TO_ADSP_LPASS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	4,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	6,		\
        .Permissions	=	7,		\
    },		\
    {		\
        .Vmid	=	0x16,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HYP_TO_SPSS_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[2];
}VMASSIGNRULE_HYP_TO_SPSS_HLOS;

#define VMASSIGNRULE_HYP_TO_SPSS_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HYP_TO_SPSS_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HYP_TO_SPSS_HLOS,SrcVMs),		\
.DstVMsCount	=	2,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HYP_TO_SPSS_HLOS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	4,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0x1A,		\
        .Permissions	=	7,		\
    },		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HYP_TO_HLOS_UNMAP{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HYP_TO_HLOS_UNMAP;

#define VMASSIGNRULE_HYP_TO_HLOS_UNMAP_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HYP_TO_HLOS_UNMAP),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HYP_TO_HLOS_UNMAP,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HYP_TO_HLOS_UNMAP,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	4,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0xE,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HYP_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HYP_TO_HLOS;

#define VMASSIGNRULE_HYP_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HYP_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HYP_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HYP_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	4,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_SSC_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_SSC_TO_HLOS;

#define VMASSIGNRULE_SSC_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_SSC_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_SSC_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_SSC_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	1,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	5,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_ADSP_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_ADSP_TO_HLOS;

#define VMASSIGNRULE_ADSP_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_ADSP_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_ADSP_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_ADSP_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	1,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	6,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_ADSP_LPASS_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[2];
    DSTVM DstVMs[1];
}VMASSIGNRULE_ADSP_LPASS_TO_HLOS;

#define VMASSIGNRULE_ADSP_LPASS_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_ADSP_LPASS_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	2,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_ADSP_LPASS_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_ADSP_LPASS_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	1,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	6,		\
    },		\
    {		\
        .Vmid	=	0x16,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_SPSS_HLOS_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[2];
    DSTVM DstVMs[1];
}VMASSIGNRULE_SPSS_HLOS_TO_HLOS;

#define VMASSIGNRULE_SPSS_HLOS_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_SPSS_HLOS_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	2,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_SPSS_HLOS_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_SPSS_HLOS_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	0x1A,		\
    },		\
    {		\
        .Vmid	=	3,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_UNMAP_TO_VIDEOFW{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_UNMAP_TO_VIDEOFW;

#define VMASSIGNRULE_HLOS_UNMAP_TO_VIDEOFW_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_UNMAP_TO_VIDEOFW),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_UNMAP_TO_VIDEOFW,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_UNMAP_TO_VIDEOFW,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	0xE,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0xC,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_VIDEOFW_TO_HLOS_UNMAP{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_VIDEOFW_TO_HLOS_UNMAP;

#define VMASSIGNRULE_VIDEOFW_TO_HLOS_UNMAP_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_VIDEOFW_TO_HLOS_UNMAP),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_VIDEOFW_TO_HLOS_UNMAP,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_VIDEOFW_TO_HLOS_UNMAP,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	1,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	0xC,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0xE,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_UNMAP_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_UNMAP_TO_HLOS;

#define VMASSIGNRULE_HLOS_UNMAP_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_UNMAP_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_UNMAP_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_UNMAP_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	0xE,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HYP_TO_CDSP{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HYP_TO_CDSP;

#define VMASSIGNRULE_HYP_TO_CDSP_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HYP_TO_CDSP),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HYP_TO_CDSP,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HYP_TO_CDSP,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	4,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0x1E,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HYP_TO_GPU_PIL{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HYP_TO_GPU_PIL;

#define VMASSIGNRULE_HYP_TO_GPU_PIL_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HYP_TO_GPU_PIL),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HYP_TO_GPU_PIL,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HYP_TO_GPU_PIL,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	4,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	0x26,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_CDSP_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_CDSP_TO_HLOS;

#define VMASSIGNRULE_CDSP_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_CDSP_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_CDSP_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_CDSP_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	1,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	0x1E,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_HLOS_UNMAP_TO_HYP{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_HLOS_UNMAP_TO_HYP;

#define VMASSIGNRULE_HLOS_UNMAP_TO_HYP_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_HLOS_UNMAP_TO_HYP),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_UNMAP_TO_HYP,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_HLOS_UNMAP_TO_HYP,DstVMs),		\
.ClearOnAssign	=	0,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	0xE,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	4,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _VMASSIGNRULE_GPU_PIL_TO_HLOS{
    UINT32 AssignRuleNodeSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SrcVMsCount;
    UINT32 SrcVMsEntrySize;
    UINT32 SrcVMsOffset;
    UINT32 DstVMsCount;
    UINT32 DstVMsEntrySize;
    UINT32 DstVMsOffset;
    UINT8 ClearOnAssign;
    UINT8 ClearOnSecure;
    UINT8 NotifySKExtension;
    UINT8 NotifyTZ;
    SRCVM SrcVMs[1];
    DSTVM DstVMs[1];
}VMASSIGNRULE_GPU_PIL_TO_HLOS;

#define VMASSIGNRULE_GPU_PIL_TO_HLOS_VAR  {		\
.AssignRuleNodeSize	=	sizeof(VMASSIGNRULE_GPU_PIL_TO_HLOS),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SrcVMsCount	=	1,		\
.SrcVMsEntrySize	=	1,		\
.SrcVMsOffset	=	offsetof(VMASSIGNRULE_GPU_PIL_TO_HLOS,SrcVMs),		\
.DstVMsCount	=	1,		\
.DstVMsEntrySize	=	2,		\
.DstVMsOffset	=	offsetof(VMASSIGNRULE_GPU_PIL_TO_HLOS,DstVMs),		\
.ClearOnAssign	=	1,		\
.ClearOnSecure	=	0,		\
.NotifySKExtension	=	1,		\
.NotifyTZ	=	0,		\
.SrcVMs	={		\
    {		\
        .Vmid	=	0x26,		\
    },		\
},		\
.DstVMs	={		\
    {		\
        .Vmid	=	3,		\
        .Permissions	=	7,		\
    },		\
},		\
}

typedef struct _SMCHANDLERNODE{
    UINT32 SMCEntryNodeSize;
    UINT16 Revision;
    UINT16 Reserved0;
    UINT32 SMCId;
    UINT8 Category;
    UINT8 IsSerialized;
    UINT16 Reserved1;
}SMCHANDLERNODE;

#define SMCHANDLERNODE_HYP_MEM_PROTECT_ASSIGN  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0,		\
.SMCId	=	0x42000C16,		\
.Category	=	2,		\
.IsSerialized	=	1,		\
.Reserved1	=	0,		\
}

#define SMCHANDLERNODE_TZ_PIL_INIT_ID  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0x0,		\
.SMCId	=	0x42000201,		\
.Category	=	2,		\
.IsSerialized	=	1,		\
.Reserved1	=	0x0,		\
}

#define SMCHANDLERNODE_TZ_PIL_MEM_ID  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0x0,		\
.SMCId	=	0x42000202,		\
.Category	=	2,		\
.IsSerialized	=	1,		\
.Reserved1	=	0x0,		\
}

#define SMCHANDLERNODE_TZ_PIL_AUTH_RESET_ID  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0x0,		\
.SMCId	=	0x42000205,		\
.Category	=	2,		\
.IsSerialized	=	1,		\
.Reserved1	=	0x0,		\
}

#define SMCHANDLERNODE_TZ_DUMP_RPM_ONLINE_ID  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0x0,		\
.SMCId	=	0x4200030F,		\
.Category	=	2,		\
.IsSerialized	=	1,		\
.Reserved1	=	0x0,		\
}

#define SMCHANDLERNODE_TZ_SUBSYS_SET_STATE_ID  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0x0,		\
.SMCId	=	0x4200010A,		\
.Category	=	2,		\
.IsSerialized	=	1,		\
.Reserved1	=	0x0,		\
}

#define SMCHANDLERNODE_TZ_MEM_PROTECT_VIDEO_VAR  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0x0,		\
.SMCId	=	0x42000C08,		\
.Category	=	2,		\
.IsSerialized	=	1,		\
.Reserved1	=	0x0,		\
}

#define SMCHANDLERNODE_TZ_PIL_UNLOCK_XPU_ID  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0x0,		\
.SMCId	=	0x42000206,		\
.Category	=	2,		\
.IsSerialized	=	1,		\
.Reserved1	=	0x0,		\
}

#define SMCHANDLERNODE_TZ_TREE_SKEXT_INFO_ID  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0,		\
.SMCId	=	0x7000000A,		\
.Category	=	2,		\
.IsSerialized	=	1,		\
.Reserved1	=	0,		\
}

#define SMCHANDLERNODE_SK_HIBERNATE  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0,		\
.SMCId	=	0x4200090A,		\
.Category	=	2,		\
.IsSerialized	=	1,		\
.Reserved1	=	0,		\
}

#define SMCHANDLERNODE_TZ_MEM_PROTECT_TAGVM  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0x0,		\
.SMCId	=	0x42000C17,		\
.Category	=	0,		\
.IsSerialized	=	0,		\
.Reserved1	=	0x0,		\
}

#define SMCHANDLERNODE_TZ_MEM_PROTECT_SD_CTRL  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0x0,		\
.SMCId	=	0x42000C0F,		\
.Category	=	0,		\
.IsSerialized	=	0,		\
.Reserved1	=	0x0,		\
}

#define SMCHANDLERNODE_TZ_ASSIGN_IO_RANGE  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0x0,		\
.SMCId	=	0x42000C19,		\
.Category	=	0,		\
.IsSerialized	=	0,		\
.Reserved1	=	0x0,		\
}

#define SMCHANDLERNODE_HYP_PRNG_GETDATA_ID  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0x0,		\
.SMCId	=	0x42000A02,		\
.Category	=	0,		\
.IsSerialized	=	0,		\
.Reserved1	=	0x0,		\
}

#define SMCHANDLERNODE_TZ_SECURE_MOR_REGIONS_ID  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0x0,		\
.SMCId	=	0x4200090B,		\
.Category	=	0,		\
.IsSerialized	=	0,		\
.Reserved1	=	0x0,		\
}

#define SMCHANDLERNODE_TZ_INFO_IS_SVC_AVAILABLE_ID  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0x0,		\
.SMCId	=	0x42000601,		\
.Category	=	3,		\
.IsSerialized	=	0,		\
.Reserved1	=	0x0,		\
}

#define SMCHANDLERNODE_TZ_POWER_COLLAPSE_ID  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0x0,		\
.SMCId	=	0x42000102,		\
.Category	=	3,		\
.IsSerialized	=	0,		\
.Reserved1	=	0x0,		\
}

#define SMCHANDLERNODE_TZ_DUMP_REQUEST_CACHE_DUMP_ID  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0x0,		\
.SMCId	=	0x42000305,		\
.Category	=	3,		\
.IsSerialized	=	0,		\
.Reserved1	=	0x0,		\
}

#define SMCHANDLERNODE_TZ_DUMP_SECURITY_ALLOWS_MEM_DUMP_ID  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0x0,		\
.SMCId	=	0xC2000310,		\
.Category	=	3,		\
.IsSerialized	=	0,		\
.Reserved1	=	0x0,		\
}

#define SMCHANDLERNODE_TZ_IO_ACCESS_READ_ID  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0x0,		\
.SMCId	=	0x42000501,		\
.Category	=	3,		\
.IsSerialized	=	0,		\
.Reserved1	=	0x0,		\
}

#define SMCHANDLERNODE_TZ_IO_ACCESS_WRITE_ID  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0x0,		\
.SMCId	=	0x42000502,		\
.Category	=	3,		\
.IsSerialized	=	0,		\
.Reserved1	=	0x0,		\
}

#define SMCHANDLERNODE_TZ_POWER_SPMI_DISABLE_BUS_ID  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0x0,		\
.SMCId	=	0x42000902,		\
.Category	=	3,		\
.IsSerialized	=	0,		\
.Reserved1	=	0x0,		\
}

#define SMCHANDLERNODE_TZ_CONFIG_HW_FOR_RAM_DUMP_ID  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0x0,		\
.SMCId	=	0x42000109,		\
.Category	=	3,		\
.IsSerialized	=	0,		\
.Reserved1	=	0x0,		\
}

#define SMCHANDLERNODE_TZ_CONFIG_CPU_ERRATA_ID  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0x0,		\
.SMCId	=	0x42000112,		\
.Category	=	3,		\
.IsSerialized	=	0,		\
.Reserved1	=	0x0,		\
}

#define SMCHANDLERNODE_TZ_PIL_IS_SUBSYS_SUPPORTED_ID  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0x0,		\
.SMCId	=	0x42000207,		\
.Category	=	3,		\
.IsSerialized	=	0,		\
.Reserved1	=	0x0,		\
}

#define SMCHANDLERNODE_TZ_PIL_IS_SUBSYS_MANDATED_ID  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0x0,		\
.SMCId	=	0x42000208,		\
.Category	=	3,		\
.IsSerialized	=	0,		\
.Reserved1	=	0x0,		\
}

#define SMCHANDLERNODE_TZ_RESTORE_SEC_CFG  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0,		\
.SMCId	=	0x42000C02,		\
.Category	=	3,		\
.IsSerialized	=	0,		\
.Reserved1	=	0,		\
}

#define SMCHANDLERNODE_TZ_DUMP_SECURITY_ALLOWS_MEM_DUMP_LEGACY_ID  {		\
.SMCEntryNodeSize	=	sizeof(SMCHANDLERNODE),		\
.Revision	=	0x1,		\
.Reserved0	=	0,		\
.SMCId	=	0x4200030b,		\
.Category	=	3,		\
.IsSerialized	=	0,		\
.Reserved1	=	0,		\
}

typedef struct _SMCID {
    UINT32 Value;
}SMCID;



typedef struct _ADDRESSRANGE {
    UINT64 PhysicalAddress;
    UINT64 Size;
}ADDRESSRANGE;



typedef struct _SID {
    UINT32 Value;
}SID;



typedef struct _SKEXTNPARAMBYTE {
    UINT8 bytevalue;
}SKEXTNPARAMBYTE;



typedef struct _SKEXTENSIONNODE_QCSKEXTENSION{
    UINT32 SKExtTableSize;
    UINT16 Revision;
    UINT16 Reserved;
    UINT64 SKExtId;
    UINT32 SMCIDsHandleArraySize;
    UINT32 SMCIDsHandleArrayEntrySize;
    UINT32 SMCIDsHandleArrayOffset;
    UINT32 SMCIDsOriginateArraySize;
    UINT32 SMCIDsOriginateArrayEntrySize;
    UINT32 SMCIDsOriginateArrayOffset;
    UINT32 AddressRangeArraySize;
    UINT32 AddressRangeArrayEntrySize;
    UINT32 AddressRangeArrayOffset;
    UINT32 SubsystemIDArraySize;
    UINT32 SubsystemIDArrayEntrySize;
    UINT32 SubsystemIDArrayOffset;
    UINT32 SKExtParamsOffset;
    UINT32 SKExtParamsSize;
    SMCID SMCIDsHandleArray[10];
    SMCID SMCIDsOriginateArray[13];
    ADDRESSRANGE AddressRangeArray[26];
    SID SubsystemIDArray[4];
    SKEXTNPARAMBYTE SKExtParams[4];
}SKEXTENSIONNODE_QCSKEXTENSION;

#define SKEXTENSIONNODE_QCSKEXTENSION_VAR  {		\
.SKExtTableSize	=	sizeof(SKEXTENSIONNODE_QCSKEXTENSION),		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SKExtId	=	0x1234,		\
.SMCIDsHandleArraySize	=	10,		\
.SMCIDsHandleArrayEntrySize	=	4,		\
.SMCIDsHandleArrayOffset	=	offsetof(SKEXTENSIONNODE_QCSKEXTENSION,SMCIDsHandleArray),		\
.SMCIDsOriginateArraySize	=	13,		\
.SMCIDsOriginateArrayEntrySize	=	4,		\
.SMCIDsOriginateArrayOffset	=	offsetof(SKEXTENSIONNODE_QCSKEXTENSION,SMCIDsOriginateArray),		\
.AddressRangeArraySize	=	26,		\
.AddressRangeArrayEntrySize	=	16,		\
.AddressRangeArrayOffset	=	offsetof(SKEXTENSIONNODE_QCSKEXTENSION,AddressRangeArray),		\
.SubsystemIDArraySize	=	4,		\
.SubsystemIDArrayEntrySize	=	4,		\
.SubsystemIDArrayOffset	=	offsetof(SKEXTENSIONNODE_QCSKEXTENSION,SubsystemIDArray),		\
.SKExtParamsOffset	=	offsetof(SKEXTENSIONNODE_QCSKEXTENSION,SKExtParams),		\
.SKExtParamsSize	=	4,		\
.SMCIDsHandleArray	={		\
    {		\
        .Value	=	0x42000201,		\
    },		\
    {		\
        .Value	=	0x42000202,		\
    },		\
    {		\
        .Value	=	0x42000205,		\
    },		\
    {		\
        .Value	=	0x42000206,		\
    },		\
    {		\
        .Value	=	0x4200030F,		\
    },		\
    {		\
        .Value	=	0x4200010A,		\
    },		\
    {		\
        .Value	=	0x42000C08,		\
    },		\
    {		\
        .Value	=	0x42000C16,		\
    },		\
    {		\
        .Value	=	0x7000000A,		\
    },		\
    {		\
        .Value	=	0x4200090A,		\
    },		\
},		\
.SMCIDsOriginateArray	={		\
    {		\
        .Value	=	0x42000C1E,		\
    },		\
    {		\
        .Value	=	0x42000C16,		\
    },		\
    {		\
        .Value	=	0x42000201,		\
    },		\
    {		\
        .Value	=	0x42000202,		\
    },		\
    {		\
        .Value	=	0x42000205,		\
    },		\
    {		\
        .Value	=	0x42000206,		\
    },		\
    {		\
        .Value	=	0x4200030F,		\
    },		\
    {		\
        .Value	=	0x4200030B,		\
    },		\
    {		\
        .Value	=	0x42000C02,		\
    },		\
    {		\
        .Value	=	0x42000A01,		\
    },		\
    {		\
        .Value	=	0x4200010A,		\
    },		\
    {		\
        .Value	=	0x42000C1D,		\
    },		\
    {		\
        .Value	=	0xC2000310,		\
    },		\
},		\
.AddressRangeArray	={		\
    {		\
        .PhysicalAddress	=	0x01e04000,		\
        .Size	=	0xC000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x1e5e000,		\
        .Size	=	0x1000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x0aac0000,		\
        .Size	=	0x25000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x17300000,		\
        .Size	=	0x4000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x17000000,		\
        .Size	=	0x48000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x0503C000,		\
        .Size	=	0x1000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x05060000,		\
        .Size	=	0x1000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x05400000,		\
        .Size	=	0x40000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x05800000,		\
        .Size	=	0x4000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x5f19000,		\
        .Size	=	0x1000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x5f05000,		\
        .Size	=	0x1000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x5f1a000,		\
        .Size	=	0x1000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x5f1f000,		\
        .Size	=	0x1000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x5f0b000,		\
        .Size	=	0x1000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x04080000,		\
        .Size	=	0x4000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x08000000,		\
        .Size	=	0x400000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x00145000,		\
        .Size	=	0x1000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x01f40000,		\
        .Size	=	0x40000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x0C2A0000,		\
        .Size	=	0x60000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x00147000,		\
        .Size	=	0x1000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x0b2e0000,		\
        .Size	=	0x1000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x00163000,		\
        .Size	=	0x1000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x0c210000,		\
        .Size	=	0x80000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x172000,		\
        .Size	=	0x1000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x1881000,		\
        .Size	=	0x1000,		\
    },		\
    {		\
        .PhysicalAddress	=	0x1882000,		\
        .Size	=	0x1000,		\
    },		\
},		\
.SubsystemIDArray	={		\
    {		\
        .Value	=	1,		\
    },		\
    {		\
        .Value	=	12,		\
    },		\
    {		\
        .Value	=	8,		\
    },		\
    {		\
        .Value	=	11,		\
    },		\
},		\
.SKExtParams	={		\
    {		\
        .bytevalue	=	0x8,		\
    },		\
    {		\
        .bytevalue	=	0x9,		\
    },		\
    {		\
        .bytevalue	=	0xA,		\
    },		\
    {		\
        .bytevalue	=	0xB,		\
    },		\
},		\
}

typedef struct _ACCESSCONTROLNODE {
    UINT8 Value;
}ACCESSCONTROLNODE;



typedef struct _RESOURCEDESCRIPTOR_RD{
    UINT32 Length;
    UINT16 ResourceType;
    UINT16 ResourceSubType;
    UINT32 ResourceId;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 NumSMMUNodes;
    UINT32 SMMUNodesOffset;
    UINT32 NumVMConfigNodes;
    UINT32 VMConfigNodesOffset;
    UINT32 NumVMAssignRules;
    UINT32 VMAssignRulesOffset;
    UINT32 NumSMCEntries;
    UINT32 SMCEntriesOffset;
    UINT32 NumSKExtTables;
    UINT32 SKExtTablesOffset;
    UINT32 NumACConfigNodes;
    UINT32 ACConfigNodesOffset;
    SMMUNODE_APPSTCU SMMUNodes_appstcu;
    SMMUNODE_GFX SMMUNodes_gfx;
    VMCONFIGNODE VMConfigNodes[39];
    VMASSIGNRULE_HLOS_TO_CP_SECDISP VMAssignRules_hlos_to_cp_secdisp;
    VMASSIGNRULE_HLOS_TO_CP_CAMERA VMAssignRules_hlos_to_cp_camera;
    VMASSIGNRULE_HLOS_TO_CP_TOUCH VMAssignRules_hlos_to_cp_touch;
    VMASSIGNRULE_HLOS_TO_CP_BITSTREAM VMAssignRules_hlos_to_cp_bitstream;
    VMASSIGNRULE_HLOS_TO_CP_PIXEL VMAssignRules_hlos_to_cp_pixel;
    VMASSIGNRULE_HLOS_TO_CP_CAMERA_PREVIEW VMAssignRules_hlos_to_cp_camera_preview;
    VMASSIGNRULE_HLOS_TO_CP_APP VMAssignRules_hlos_to_cp_app;
    VMASSIGNRULE_HLOS_TO_CP_SECDISP_HLOS VMAssignRules_hlos_to_cp_secdisp_hlos;
    VMASSIGNRULE_HLOS_TO_CP_CAMERA_HLOS VMAssignRules_hlos_to_cp_camera_hlos;
    VMASSIGNRULE_HLOS_TO_CP_TOUCH_HLOS VMAssignRules_hlos_to_cp_touch_hlos;
    VMASSIGNRULE_HLOS_TO_CP_BITSTREAM_HLOS VMAssignRules_hlos_to_cp_bitstream_hlos;
    VMASSIGNRULE_HLOS_TO_CP_PIXEL_HLOS VMAssignRules_hlos_to_cp_pixel_hlos;
    VMASSIGNRULE_HLOS_TO_CP_CAMPREV_HLOS VMAssignRules_hlos_to_cp_camprev_hlos;
    VMASSIGNRULE_HLOS_TO_CP_APP_HLOS VMAssignRules_hlos_to_cp_app_hlos;
    VMASSIGNRULE_CP_SECDISP_TO_HLOS VMAssignRules_cp_secdisp_to_hlos;
    VMASSIGNRULE_CP_CAMERA_TO_HLOS VMAssignRules_cp_camera_to_hlos;
    VMASSIGNRULE_CP_TOUCH_TO_HLOS VMAssignRules_cp_touch_to_hlos;
    VMASSIGNRULE_CP_BITSTREAM_TO_HLOS VMAssignRules_cp_bitstream_to_hlos;
    VMASSIGNRULE_CP_PIXEL_TO_HLOS VMAssignRules_cp_pixel_to_hlos;
    VMASSIGNRULE_CP_CAMPREV_TO_HLOS VMAssignRules_cp_camprev_to_hlos;
    VMASSIGNRULE_CP_APP_TO_HLOS VMAssignRules_cp_app_to_hlos;
    VMASSIGNRULE_HLOS_SECDISP_TO_HLOS VMAssignRules_hlos_secdisp_to_hlos;
    VMASSIGNRULE_HLOS_CAMERA_TO_HLOS VMAssignRules_hlos_camera_to_hlos;
    VMASSIGNRULE_HLOS_TOUCH_TO_HLOS VMAssignRules_hlos_touch_to_hlos;
    VMASSIGNRULE_HLOS_BITSTREAM_TO_HLOS VMAssignRules_hlos_bitstream_to_hlos;
    VMASSIGNRULE_HLOS_PIXEL_TO_HLOS VMAssignRules_hlos_pixel_to_hlos;
    VMASSIGNRULE_HLOS_CAMPREV_TO_HLOS VMAssignRules_hlos_camprev_to_hlos;
    VMASSIGNRULE_HLOS_APP_TO_HLOS VMAssignRules_hlos_app_to_hlos;
    VMASSIGNRULE_HLOS_TO_MSA VMAssignRules_hlos_to_msa;
    VMASSIGNRULE_HLOS_TO_MSA_HLOS VMAssignRules_hlos_to_msa_hlos;
    VMASSIGNRULE_HLOS_MSA_TO_MSA VMAssignRules_hlos_msa_to_msa;
    VMASSIGNRULE_MSA_TO_HLOS VMAssignRules_msa_to_hlos;
    VMASSIGNRULE_HLOS_TO_MSA_WLAN VMAssignRules_hlos_to_msa_wlan;
    VMASSIGNRULE_HLOS_TO_MSA_WLAN_COPYENG VMAssignRules_hlos_to_msa_wlan_copyeng;
    VMASSIGNRULE_WLAN_MSA_TO_HLOS VMAssignRules_wlan_msa_to_hlos;
    VMASSIGNRULE_WLAN_MSA_COPYENG_TO_HLOS VMAssignRules_wlan_msa_copyeng_to_hlos;
    VMASSIGNRULE_HLOS_TO_SSC_Q6_HLOS VMAssignRules_hlos_to_ssc_q6_hlos;
    VMASSIGNRULE_HLOS_SSC_Q6_TO_HLOS VMAssignRules_hlos_ssc_q6_to_hlos;
    VMASSIGNRULE_HLOS_TO_TZ_SPSS VMAssignRules_hlos_to_tz_spss;
    VMASSIGNRULE_HLOS_TO_HYP VMAssignRules_hlos_to_hyp;
    VMASSIGNRULE_HLOS_TO_HLOS_ADSP_SSC_MSA VMAssignRules_hlos_to_hlos_adsp_ssc_msa;
    VMASSIGNRULE_MSA_HLOS_TO_HLOS VMAssignRules_msa_hlos_to_hlos;
    VMASSIGNRULE_HLOS_TO_ADSP_SHARED VMAssignRules_hlos_to_adsp_shared;
    VMASSIGNRULE_HLOS_TO_SPSS_SHARED VMAssignRules_hlos_to_spss_shared;
    VMASSIGNRULE_ADSP_SHARED_TO_HLOS VMAssignRules_adsp_shared_to_hlos;
    VMASSIGNRULE_SPSS_SHARED_TO_HLOS VMAssignRules_spss_shared_to_hlos;
    VMASSIGNRULE_HLOS_TO_SPSS_HLOS_SHARED_HLOS VMAssignRules_hlos_to_spss_hlos_shared_hlos;
    VMASSIGNRULE_SPSS_HLOS_SHARED_HLOS_TO_HLOS VMAssignRules_spss_hlos_shared_hlos_to_hlos;
    VMASSIGNRULE_HLOS_TO_HLOS VMAssignRules_hlos_to_hlos;
    VMASSIGNRULE_HLOS_TO_CDSP VMAssignRules_hlos_to_cdsp;
    VMASSIGNRULE_HLOS_TO_CDSP_CAMERA VMAssignRules_hlos_to_cdsp_camera;
    VMASSIGNRULE_CDSP_CAMERA_TO_HLOS VMAssignRules_cdsp_camera_to_hlos;
    VMASSIGNRULE_HYP_TO_SSC VMAssignRules_hyp_to_ssc;
    VMASSIGNRULE_HYP_TO_ADSP VMAssignRules_hyp_to_adsp;
    VMASSIGNRULE_HYP_TO_ADSP_LPASS VMAssignRules_hyp_to_adsp_lpass;
    VMASSIGNRULE_HYP_TO_SPSS_HLOS VMAssignRules_hyp_to_spss_hlos;
    VMASSIGNRULE_HYP_TO_HLOS_UNMAP VMAssignRules_hyp_to_hlos_unmap;
    VMASSIGNRULE_SSC_TO_HLOS VMAssignRules_ssc_to_hlos;
    VMASSIGNRULE_ADSP_TO_HLOS VMAssignRules_adsp_to_hlos;
    VMASSIGNRULE_ADSP_LPASS_TO_HLOS VMAssignRules_adsp_lpass_to_hlos;
    VMASSIGNRULE_SPSS_HLOS_TO_HLOS VMAssignRules_spss_hlos_to_hlos;
    VMASSIGNRULE_HLOS_UNMAP_TO_VIDEOFW VMAssignRules_hlos_unmap_to_videofw;
    VMASSIGNRULE_VIDEOFW_TO_HLOS_UNMAP VMAssignRules_videofw_to_hlos_unmap;
    VMASSIGNRULE_HLOS_UNMAP_TO_HLOS VMAssignRules_hlos_unmap_to_hlos;
    VMASSIGNRULE_HYP_TO_CDSP VMAssignRules_hyp_to_cdsp;
    VMASSIGNRULE_HYP_TO_GPU_PIL VMAssignRules_hyp_to_gpu_pil;
    VMASSIGNRULE_CDSP_TO_HLOS VMAssignRules_cdsp_to_hlos;
    VMASSIGNRULE_HLOS_UNMAP_TO_HYP VMAssignRules_hlos_unmap_to_hyp;
    VMASSIGNRULE_GPU_PIL_TO_HLOS VMAssignRules_gpu_pil_to_hlos;
    VMASSIGNRULE_HYP_TO_HLOS VMAssignRules_hyp_to_hlos;
    SMCHANDLERNODE SMCIDNodes[28];
    SKEXTENSIONNODE_QCSKEXTENSION SKExtensionTables_qcskextension;
    ACCESSCONTROLNODE AccessControlBuffer[20000];
}RESOURCEDESCRIPTOR_RD;

#define RESOURCEDESCRIPTOR_RD_VAR  {		\
.Length	=	sizeof(RESOURCEDESCRIPTOR_RD),		\
.ResourceType	=	0x4,		\
.ResourceSubType	=	1,		\
.ResourceId	=	0xDEADF00D,		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.NumSMMUNodes	=	2,		\
.SMMUNodesOffset	=	offsetof(RESOURCEDESCRIPTOR_RD,SMMUNodes_appstcu),		\
.NumVMConfigNodes	=	39,		\
.VMConfigNodesOffset	=	offsetof(RESOURCEDESCRIPTOR_RD,VMConfigNodes),		\
.NumVMAssignRules	=	70,		\
.VMAssignRulesOffset	=	offsetof(RESOURCEDESCRIPTOR_RD,VMAssignRules_hlos_to_cp_secdisp),		\
.NumSMCEntries	=	28,		\
.SMCEntriesOffset	=	offsetof(RESOURCEDESCRIPTOR_RD,SMCIDNodes),		\
.NumSKExtTables	=	1,		\
.SKExtTablesOffset	=	offsetof(RESOURCEDESCRIPTOR_RD,SKExtensionTables_qcskextension),		\
.NumACConfigNodes	=	20000,		\
.ACConfigNodesOffset	=	offsetof(RESOURCEDESCRIPTOR_RD,AccessControlBuffer),		\
.SMMUNodes_appstcu	=	SMMUNODE_APPSTCU_VAR		,\
.SMMUNodes_gfx	=	SMMUNODE_GFX_VAR		,\
.VMConfigNodes	=	{VMCONFIGNODE_TZ,VMCONFIGNODE_RPM,VMCONFIGNODE_HLOS,VMCONFIGNODE_HYP,VMCONFIGNODE_SSC_Q6_ELF,VMCONFIGNODE_ADSP_Q6_ELF,VMCONFIGNODE_SSC_HLOS,VMCONFIGNODE_CP_TOUCH,VMCONFIGNODE_CP_BITSTREAM,VMCONFIGNODE_CP_PIXEL,VMCONFIGNODE_CP_NON_PIXEL,VMCONFIGNODE_VIDEO_FW,VMCONFIGNODE_CP_CAMERA,VMCONFIGNODE_HLOS_UNMAPPED,VMCONFIGNODE_MSS_MSA,VMCONFIGNODE_MSS_NONMSA,VMCONFIGNODE_CP_SECDISP,VMCONFIGNODE_CP_APP,VMCONFIGNODE_UNMAPPED,VMCONFIGNODE_TZ_UNMAPPED,VMCONFIGNODE_TZ_STATIC,VMCONFIGNODE_LPASS,VMCONFIGNODE_WLAN,VMCONFIGNODE_WLAN_COPYENG,VMCONFIGNODE_SPSS_SP,VMCONFIGNODE_SPSS_NONSP,VMCONFIGNODE_SHARED_GPU_PIL,VMCONFIGNODE_CP_CAMERA_PREVIEW,VMCONFIGNODE_CDSP_Q6_ELF,VMCONFIGNODE_HLOS_GSI,VMCONFIGNODE_ADSP_SHARED,VMCONFIGNODE_SPSS_SP_SHARED,VMCONFIGNODE_KERNEL_PROTECTION,VMCONFIGNODE_SPSS_HLOS_SHARED,VMCONFIGNODE_ADSP_HEAP,VMCONFIGNODE_NPU_FW,VMCONFIGNODE_CP_NPU,VMCONFIGNODE_CP_CDSP,VMCONFIGNODE_MSS_NAV	},		\
.VMAssignRules_hlos_to_cp_secdisp	=	VMASSIGNRULE_HLOS_TO_CP_SECDISP_VAR		,\
.VMAssignRules_hlos_to_cp_camera	=	VMASSIGNRULE_HLOS_TO_CP_CAMERA_VAR		,\
.VMAssignRules_hlos_to_cp_touch	=	VMASSIGNRULE_HLOS_TO_CP_TOUCH_VAR		,\
.VMAssignRules_hlos_to_cp_bitstream	=	VMASSIGNRULE_HLOS_TO_CP_BITSTREAM_VAR		,\
.VMAssignRules_hlos_to_cp_pixel	=	VMASSIGNRULE_HLOS_TO_CP_PIXEL_VAR		,\
.VMAssignRules_hlos_to_cp_camera_preview	=	VMASSIGNRULE_HLOS_TO_CP_CAMERA_PREVIEW_VAR		,\
.VMAssignRules_hlos_to_cp_app	=	VMASSIGNRULE_HLOS_TO_CP_APP_VAR		,\
.VMAssignRules_hlos_to_cp_secdisp_hlos	=	VMASSIGNRULE_HLOS_TO_CP_SECDISP_HLOS_VAR		,\
.VMAssignRules_hlos_to_cp_camera_hlos	=	VMASSIGNRULE_HLOS_TO_CP_CAMERA_HLOS_VAR		,\
.VMAssignRules_hlos_to_cp_touch_hlos	=	VMASSIGNRULE_HLOS_TO_CP_TOUCH_HLOS_VAR		,\
.VMAssignRules_hlos_to_cp_bitstream_hlos	=	VMASSIGNRULE_HLOS_TO_CP_BITSTREAM_HLOS_VAR		,\
.VMAssignRules_hlos_to_cp_pixel_hlos	=	VMASSIGNRULE_HLOS_TO_CP_PIXEL_HLOS_VAR		,\
.VMAssignRules_hlos_to_cp_camprev_hlos	=	VMASSIGNRULE_HLOS_TO_CP_CAMPREV_HLOS_VAR		,\
.VMAssignRules_hlos_to_cp_app_hlos	=	VMASSIGNRULE_HLOS_TO_CP_APP_HLOS_VAR		,\
.VMAssignRules_cp_secdisp_to_hlos	=	VMASSIGNRULE_CP_SECDISP_TO_HLOS_VAR		,\
.VMAssignRules_cp_camera_to_hlos	=	VMASSIGNRULE_CP_CAMERA_TO_HLOS_VAR		,\
.VMAssignRules_cp_touch_to_hlos	=	VMASSIGNRULE_CP_TOUCH_TO_HLOS_VAR		,\
.VMAssignRules_cp_bitstream_to_hlos	=	VMASSIGNRULE_CP_BITSTREAM_TO_HLOS_VAR		,\
.VMAssignRules_cp_pixel_to_hlos	=	VMASSIGNRULE_CP_PIXEL_TO_HLOS_VAR		,\
.VMAssignRules_cp_camprev_to_hlos	=	VMASSIGNRULE_CP_CAMPREV_TO_HLOS_VAR		,\
.VMAssignRules_cp_app_to_hlos	=	VMASSIGNRULE_CP_APP_TO_HLOS_VAR		,\
.VMAssignRules_hlos_secdisp_to_hlos	=	VMASSIGNRULE_HLOS_SECDISP_TO_HLOS_VAR		,\
.VMAssignRules_hlos_camera_to_hlos	=	VMASSIGNRULE_HLOS_CAMERA_TO_HLOS_VAR		,\
.VMAssignRules_hlos_touch_to_hlos	=	VMASSIGNRULE_HLOS_TOUCH_TO_HLOS_VAR		,\
.VMAssignRules_hlos_bitstream_to_hlos	=	VMASSIGNRULE_HLOS_BITSTREAM_TO_HLOS_VAR		,\
.VMAssignRules_hlos_pixel_to_hlos	=	VMASSIGNRULE_HLOS_PIXEL_TO_HLOS_VAR		,\
.VMAssignRules_hlos_camprev_to_hlos	=	VMASSIGNRULE_HLOS_CAMPREV_TO_HLOS_VAR		,\
.VMAssignRules_hlos_app_to_hlos	=	VMASSIGNRULE_HLOS_APP_TO_HLOS_VAR		,\
.VMAssignRules_hlos_to_msa	=	VMASSIGNRULE_HLOS_TO_MSA_VAR		,\
.VMAssignRules_hlos_to_msa_hlos	=	VMASSIGNRULE_HLOS_TO_MSA_HLOS_VAR		,\
.VMAssignRules_hlos_msa_to_msa	=	VMASSIGNRULE_HLOS_MSA_TO_MSA_VAR		,\
.VMAssignRules_msa_to_hlos	=	VMASSIGNRULE_MSA_TO_HLOS_VAR		,\
.VMAssignRules_hlos_to_msa_wlan	=	VMASSIGNRULE_HLOS_TO_MSA_WLAN_VAR		,\
.VMAssignRules_hlos_to_msa_wlan_copyeng	=	VMASSIGNRULE_HLOS_TO_MSA_WLAN_COPYENG_VAR		,\
.VMAssignRules_wlan_msa_to_hlos	=	VMASSIGNRULE_WLAN_MSA_TO_HLOS_VAR		,\
.VMAssignRules_wlan_msa_copyeng_to_hlos	=	VMASSIGNRULE_WLAN_MSA_COPYENG_TO_HLOS_VAR		,\
.VMAssignRules_hlos_to_ssc_q6_hlos	=	VMASSIGNRULE_HLOS_TO_SSC_Q6_HLOS_VAR		,\
.VMAssignRules_hlos_ssc_q6_to_hlos	=	VMASSIGNRULE_HLOS_SSC_Q6_TO_HLOS_VAR		,\
.VMAssignRules_hlos_to_tz_spss	=	VMASSIGNRULE_HLOS_TO_TZ_SPSS_VAR		,\
.VMAssignRules_hlos_to_hyp	=	VMASSIGNRULE_HLOS_TO_HYP_VAR		,\
.VMAssignRules_hlos_to_hlos_adsp_ssc_msa	=	VMASSIGNRULE_HLOS_TO_HLOS_ADSP_SSC_MSA_VAR		,\
.VMAssignRules_msa_hlos_to_hlos	=	VMASSIGNRULE_MSA_HLOS_TO_HLOS_VAR		,\
.VMAssignRules_hlos_to_adsp_shared	=	VMASSIGNRULE_HLOS_TO_ADSP_SHARED_VAR		,\
.VMAssignRules_hlos_to_spss_shared	=	VMASSIGNRULE_HLOS_TO_SPSS_SHARED_VAR		,\
.VMAssignRules_adsp_shared_to_hlos	=	VMASSIGNRULE_ADSP_SHARED_TO_HLOS_VAR		,\
.VMAssignRules_spss_shared_to_hlos	=	VMASSIGNRULE_SPSS_SHARED_TO_HLOS_VAR		,\
.VMAssignRules_hlos_to_spss_hlos_shared_hlos	=	VMASSIGNRULE_HLOS_TO_SPSS_HLOS_SHARED_HLOS_VAR		,\
.VMAssignRules_spss_hlos_shared_hlos_to_hlos	=	VMASSIGNRULE_SPSS_HLOS_SHARED_HLOS_TO_HLOS_VAR		,\
.VMAssignRules_hlos_to_hlos	=	VMASSIGNRULE_HLOS_TO_HLOS_VAR		,\
.VMAssignRules_hlos_to_cdsp	=	VMASSIGNRULE_HLOS_TO_CDSP_VAR		,\
.VMAssignRules_hlos_to_cdsp_camera	=	VMASSIGNRULE_HLOS_TO_CDSP_CAMERA_VAR		,\
.VMAssignRules_cdsp_camera_to_hlos	=	VMASSIGNRULE_CDSP_CAMERA_TO_HLOS_VAR		,\
.VMAssignRules_hyp_to_ssc	=	VMASSIGNRULE_HYP_TO_SSC_VAR		,\
.VMAssignRules_hyp_to_adsp	=	VMASSIGNRULE_HYP_TO_ADSP_VAR		,\
.VMAssignRules_hyp_to_adsp_lpass	=	VMASSIGNRULE_HYP_TO_ADSP_LPASS_VAR		,\
.VMAssignRules_hyp_to_spss_hlos	=	VMASSIGNRULE_HYP_TO_SPSS_HLOS_VAR		,\
.VMAssignRules_hyp_to_hlos_unmap	=	VMASSIGNRULE_HYP_TO_HLOS_UNMAP_VAR		,\
.VMAssignRules_ssc_to_hlos	=	VMASSIGNRULE_SSC_TO_HLOS_VAR		,\
.VMAssignRules_adsp_to_hlos	=	VMASSIGNRULE_ADSP_TO_HLOS_VAR		,\
.VMAssignRules_adsp_lpass_to_hlos	=	VMASSIGNRULE_ADSP_LPASS_TO_HLOS_VAR		,\
.VMAssignRules_spss_hlos_to_hlos	=	VMASSIGNRULE_SPSS_HLOS_TO_HLOS_VAR		,\
.VMAssignRules_hlos_unmap_to_videofw	=	VMASSIGNRULE_HLOS_UNMAP_TO_VIDEOFW_VAR		,\
.VMAssignRules_videofw_to_hlos_unmap	=	VMASSIGNRULE_VIDEOFW_TO_HLOS_UNMAP_VAR		,\
.VMAssignRules_hlos_unmap_to_hlos	=	VMASSIGNRULE_HLOS_UNMAP_TO_HLOS_VAR		,\
.VMAssignRules_hyp_to_cdsp	=	VMASSIGNRULE_HYP_TO_CDSP_VAR		,\
.VMAssignRules_hyp_to_gpu_pil	=	VMASSIGNRULE_HYP_TO_GPU_PIL_VAR		,\
.VMAssignRules_cdsp_to_hlos	=	VMASSIGNRULE_CDSP_TO_HLOS_VAR		,\
.VMAssignRules_hlos_unmap_to_hyp	=	VMASSIGNRULE_HLOS_UNMAP_TO_HYP_VAR		,\
.VMAssignRules_gpu_pil_to_hlos	=	VMASSIGNRULE_GPU_PIL_TO_HLOS_VAR		,\
.VMAssignRules_hyp_to_hlos	=	VMASSIGNRULE_HYP_TO_HLOS_VAR		,\
.SMCIDNodes	=	{SMCHANDLERNODE_TZ_PIL_INIT_ID,SMCHANDLERNODE_TZ_PIL_MEM_ID,SMCHANDLERNODE_TZ_PIL_AUTH_RESET_ID,SMCHANDLERNODE_TZ_PIL_UNLOCK_XPU_ID,SMCHANDLERNODE_TZ_SUBSYS_SET_STATE_ID,SMCHANDLERNODE_TZ_MEM_PROTECT_VIDEO_VAR,SMCHANDLERNODE_TZ_PIL_IS_SUBSYS_SUPPORTED_ID,SMCHANDLERNODE_TZ_PIL_IS_SUBSYS_MANDATED_ID,SMCHANDLERNODE_TZ_MEM_PROTECT_TAGVM,SMCHANDLERNODE_TZ_MEM_PROTECT_SD_CTRL,SMCHANDLERNODE_TZ_ASSIGN_IO_RANGE,SMCHANDLERNODE_HYP_PRNG_GETDATA_ID,SMCHANDLERNODE_TZ_INFO_IS_SVC_AVAILABLE_ID,SMCHANDLERNODE_TZ_POWER_COLLAPSE_ID,SMCHANDLERNODE_TZ_DUMP_REQUEST_CACHE_DUMP_ID,SMCHANDLERNODE_TZ_DUMP_SECURITY_ALLOWS_MEM_DUMP_ID,SMCHANDLERNODE_TZ_IO_ACCESS_READ_ID,SMCHANDLERNODE_TZ_IO_ACCESS_WRITE_ID,SMCHANDLERNODE_TZ_POWER_SPMI_DISABLE_BUS_ID,SMCHANDLERNODE_TZ_CONFIG_HW_FOR_RAM_DUMP_ID,SMCHANDLERNODE_TZ_CONFIG_CPU_ERRATA_ID,SMCHANDLERNODE_TZ_DUMP_RPM_ONLINE_ID,SMCHANDLERNODE_TZ_RESTORE_SEC_CFG,SMCHANDLERNODE_TZ_DUMP_SECURITY_ALLOWS_MEM_DUMP_LEGACY_ID,SMCHANDLERNODE_HYP_MEM_PROTECT_ASSIGN,SMCHANDLERNODE_TZ_TREE_SKEXT_INFO_ID,SMCHANDLERNODE_SK_HIBERNATE,SMCHANDLERNODE_TZ_SECURE_MOR_REGIONS_ID	},		\
.SKExtensionTables_qcskextension	=	SKEXTENSIONNODE_QCSKEXTENSION_VAR		,\
.AccessControlBuffer	={		\
    {		\
        .Value	=	1,		\
    },		\
},		\
}

typedef struct _SOCDTABLE_SOCD{
    UINT32 Length;
    UINT32 VendorId;
    UINT32 SubVendorId;
    UINT16 DeviceId;
    UINT16 SubDeviceId;
    UINT16 Revision;
    UINT16 Reserved;
    UINT32 SharedInfoLength;
    RESOURCEDESCRIPTOR_RD ResourceDescriptors_rd;
}SOCDTABLE_SOCD;

#define SOCDTABLE_SOCD_VAR  {		\
.Length	=	sizeof(SOCDTABLE_SOCD),		\
.VendorId	=	'MOCQ',		\
.SubVendorId	=	0x0,		\
.DeviceId	=	0x100C,		\
.SubDeviceId	=	0,		\
.Revision	=	0x1,		\
.Reserved	=	0x0,		\
.SharedInfoLength	=	0,		\
.ResourceDescriptors_rd	=	RESOURCEDESCRIPTOR_RD_VAR		,\
}

#pragma pack()
